For an Android application that computes the product of two hardcoded 3x3 matrices using Jetpack Compose for the UI and native C++ code for the matrix multiplication, we need to follow a few steps:

Create a Kotlin file for the Compose UI.
Write the native C++ code for matrix multiplication.
Configure the build to include the native code.
Here is a step-by-step breakdown of how you can accomplish this:

Step 1: Setting Up the Kotlin File (MainActivity.kt)
This file will contain both the Jetpack Compose UI and the method to call the native C++ function.


import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.Button
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.*
import java.util.*

class MainActivity : ComponentActivity() {
    // Load the native library
    init {
        System.loadLibrary("native-lib")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                MatrixMultiplicationUI()
            }
        }
    }

    @Composable
    fun MatrixMultiplicationUI() {
        var result by remember { mutableStateOf(arrayOf<IntArray>()) }

        // Hardcoded matrices
        val matrixA = arrayOf(intArrayOf(1, 2, 3), intArrayOf(4, 5, 6), intArrayOf(7, 8, 9))
        val matrixB = arrayOf(intArrayOf(9, 8, 7), intArrayOf(6, 5, 4), intArrayOf(3, 2, 1))

        Column(modifier = Modifier.padding(16.dp)) {
            Button(onClick = {
                result = multiplyMatrices(matrixA, matrixB)
            }) {
                Text("Multiply Matrices")
            }

            Text(
                text = "Result:\n${Arrays.deepToString(result)}",
                modifier = Modifier.padding(top = 16.dp)
            )
        }
    }

    // Native method declaration
    external fun multiplyMatrices(matrixA: Array<IntArray>, matrixB: Array<IntArray>): Array<IntArray>
}





For an Android application that computes the product of two hardcoded 3x3 matrices using Jetpack Compose for the UI and native C++ code for the matrix multiplication, we need to follow a few steps:

Create a Kotlin file for the Compose UI.
Write the native C++ code for matrix multiplication.
Configure the build to include the native code.
Here is a step-by-step breakdown of how you can accomplish this:

Step 1: Setting Up the Kotlin File (MainActivity.kt)
This file will contain both the Jetpack Compose UI and the method to call the native C++ function.

kotlin
Copy code
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.Button
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.*
import java.util.*

class MainActivity : ComponentActivity() {
    // Load the native library
    init {
        System.loadLibrary("native-lib")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                MatrixMultiplicationUI()
            }
        }
    }

    @Composable
    fun MatrixMultiplicationUI() {
        var result by remember { mutableStateOf(arrayOf<IntArray>()) }

        // Hardcoded matrices
        val matrixA = arrayOf(intArrayOf(1, 2, 3), intArrayOf(4, 5, 6), intArrayOf(7, 8, 9))
        val matrixB = arrayOf(intArrayOf(9, 8, 7), intArrayOf(6, 5, 4), intArrayOf(3, 2, 1))

        Column(modifier = Modifier.padding(16.dp)) {
            Button(onClick = {
                result = multiplyMatrices(matrixA, matrixB)
            }) {
                Text("Multiply Matrices")
            }

            Text(
                text = "Result:\n${Arrays.deepToString(result)}",
                modifier = Modifier.padding(top = 16.dp)
            )
        }
    }

    // Native method declaration
    external fun multiplyMatrices(matrixA: Array<IntArray>, matrixB: Array<IntArray>): Array<IntArray>
}




Step 2: Writing the Native C++ Code (native-lib.cpp)
Create a C++ file that defines the function to multiply two 3x3 matrices.


#include <jni.h>

extern "C"
JNIEXPORT jobjectArray JNICALL
Java_com_yourpackage_MainActivity_multiplyMatrices(JNIEnv *env, jobject thiz, jobjectArray matrixA, jobjectArray matrixB) {
    int size = 3;
    jobjectArray result = env->NewObjectArray(size, env->FindClass("[I"), nullptr);
    
    int a[3][3];
    int b[3][3];
    int res[3][3] = {0};

    // Convert jobjectArray to native C++ arrays
    for (int i = 0; i < size; i++) {
        jintArray row = (jintArray) env->GetObjectArrayElement(matrixA, i);
        jint *elements = env->GetIntArrayElements(row, 0);
        for (int j = 0; j < size; j++) {
            a[i][j] = elements[j];
        }
        env->ReleaseIntArrayElements(row, elements, 0);
        env->DeleteLocalRef(row);

        row = (jintArray) env->GetObjectArrayElement(matrixB, i);
        elements = env->GetIntArrayElements(row, 0);
        for (int j = 0; j < size; j++) {
            b[i][j] = elements[j];
        }
        env->ReleaseIntArrayElements(row, elements, 0);
        env->DeleteLocalRef(row);
    }

    // Matrix multiplication
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            for (int k = 0; k < size; k++) {
                res[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    // Convert result to jobjectArray
    for (int i = 0; i < size; i++) {
        jintArray row = env->NewIntArray(size);
        env->SetIntArrayRegion(row, 0, size, (const jint *)res[i]);
        env->SetObjectArrayElement(result, i, row);
        env->DeleteLocalRef(row);
    }

    return result;
}



Step 3: Configure CMake and Build the Application
Add the following to your CMakeLists.txt to include the C++ file:


cmake_minimum_required(VERSION 3.4.1)

add_library(native-lib SHARED native-lib.cpp)

find_library(log-lib log)

target_link_libraries(native-lib ${log-lib})



In your build.gradle file, make sure to include the CMake build script:

android {
    ...
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}
